#! /usr/bin/env sh

# Check that this is not just ./configure. We need to run this
# from R CMD INSTALL, to have the R env vars set.

if [ -z "$R_HOME" ]; then
    echo &>2 R_HOME is not set, are you running R CMD INSTALL?
    exit 1
fi

# Find the R binary we need to use. This is a bit trickier on
# Windows, because it has two architectures. On windows R_ARCH_BIN
# is set, so this should work everywhere.
BIN="${R_HOME}/bin${R_ARCH_BIN}/R"

# ------------------------------------------------------------------------
# Detect system
# ------------------------------------------------------------------------

unset POSIX
if [ "$R_OSTYPE" = "unix" ]; then
    POSIX=true;
    UNAME=$(uname)
else
    UNAME=Windows
fi

unset WINDOWS
if [ "$R_OSTYPE" = "windows" ]; then WINDOWS=true; fi

unset LINUX
if [ "$UNAME" = "Linux" ]; then LINUX=true; fi

unset OSX
if [ "$UNAME" = "Darwin" ]; then OSX=true; fi

unset FREEBSD
if [ "UNAME" = "FreeBSD" ]; then FREEBSD=true; fi

unset OPENBSD
if [ "UNAME" = "OpenBSD" ]; then OPENBSD=true; fi

unset NETBSD
if [ "UNAME" = "NetBSD" ]; then NETBSD=true; fi

unset BSD
if [ -n "$FREEBSD" -o -n "$OPENBSD" -o -n "$NETBSD" ]; then
    BSD=true
fi

unset SUNOS
if [ "UNAME" = "SunOS" ]; then SUNOS=true; fi

unset AIX
if [ "UNAME" = "AIX" ]; then AIX=true; fi

# ------------------------------------------------------------------------
# Set source files, macros, libs, compile flags
# ------------------------------------------------------------------------

MACROS=""
OBJECTS="common.o extra.o"

if [ -n "$POSIX" ]; then
    OBJECTS="${OBJECTS} posix.o";
    MACROS="${MACROS} PS__POSIX"
    PS__POSIX=1
fi

if [ -n "$BSD" ]; then
    MACROS="${MACROS} PS__BSD"
    PS__BSD=1
fi

MACROS="$MACROS PS__VERSION"
PS__VERSION=546

if [ -n "$WINDOWS" ]; then
    MACROS="${MACROS} PS__WINDOWS _WIN32_WINNT _AVAIL_WINVER"
    MACROS="${MACROS} _CRT_SECURE_NO_WARNINGS PSAPI_VERSION"
    PS__WINDOWS=1
    _WIN32_WINNT=TODO
    _AVAIL_WINVER=TODO
    _CT_SECURE_NO_WARNINGS=""
    PSAPI_VERSION=1

    OBJECTS="${OBJECTS} windows.o arch/windows/processx_info.o"
    OBJECTS="${OBJECTS} arch/windows/process_handles.o"
    OBJECTS="${OBJECTS} arch/windows/security.o"
    OBJECTS="${OBJECTS} arch/windows/inet_ntop.o"
    OBJECTS="${OBJECTS} arch/windows/services.o"

    LIBRARIES="psapi kernel32 advapi32 shell32 netapi32 iphlpapi wtsapi32"
    LIBRARIES="${LIBRARIES} ws2_32 PowrProf"

elif [ -n "$OSX" ]; then
    MACROS="${MACROS} PS__OSX"
    PS__OSX=1
    OBJECTS="${OBJECTS} osx.o arch/osx/process_info.o"
    EXTRA_LINK_ARGS="-framework CoreFoundation -framework IOKit"

elif [ -n "$FREEBSD" ]; then
    MACROS="${MACROS} PS__FREEBSD"
    PS__FREEBSD=1
    OBJECTS="${OBJECTS} bsd.o arch/freebsd/specific.o"
    OBJECTS="${OBJECTS} arch/freebsd/sys_socks.o"
    OBJECTS="${OBJECTS} arch/freebsd/proc_socks.o"
    LIBRARIES="devstat"

elif [ -n "$OPENBSD" ]; then
    MACROS="${MACROS} PS__OPENBSD"
    PS__OPENBSD=1
    OBJECTS="${OBJECTS} bsd.o arch/openbsd/specific.o"
    LIBRARIES="kvm"

elif [ -n "$NETBSD" ]; then
    MACROS="${MACROS} PS__NETBSD"
    PS__NETBSD=1
    OBJECTS="${OBJECTS} bsd.o arch/netbsd/specific.o"
    OBJECTS="${OBJECTS} arch/netbsd/sys_socks.o"
    OBJECTS="${OBJECTS} arch/netbsd/proc_socks.o"
    LIBRARIES="kvm"

elif [ -n "$LINUX" ]; then
    MACROS="${MACROS} PS__LINUX"
    PS__LINUX=1
    OBJECTS="${OBJECTS} linux.o"

elif [ -n "$SUNOS" ]; then
    MACROS="${MACROS} PS__SUNOS"
    PS__SUNOS=1
    OBJECTS="${OBJECTS} sunos.o arch/solaris/v10/ifaddrs.o"
    OBJECTS="${OBJECTS} arch/solaris/environ.o"

elif [ -n "$AIX" ]; then
    MACROS="${MACROS} PS__AIX"
    PS__AIX=1
    OBJECTS="${OBJECTS} aix.o"
    OBJECTS="${OBJECTS} arch/aix/net_connections.o"
    OBJECTS="${OBJECTS} arch/aix/common.o"
    OBJECTS="${OBJECTS} arch/aix/ifaddrs.o"
fi

# ------------------------------------------------------------------------
# Create Makevars file
# ------------------------------------------------------------------------

# OBJECTS (= source files)

sed "s|@OBJECTS@|${OBJECTS}|" src/Makevars.in > src/Makevars

# MACROS will be set as preprocessor macros
echo "/* Macros created by configure */" > src/config.h
for m in $MACROS; do
    ind='$'$m
    eval echo '\#'define $m $ind
done >> src/config.h

# TODO LIBRARIES

# TODO EXTRA_LINK_ARGS

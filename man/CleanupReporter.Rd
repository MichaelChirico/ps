% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testthat-reporter.R
\name{CleanupReporter}
\alias{CleanupReporter}
\title{testthat reporter that checks if child proceses are cleaned up in tests}
\usage{
CleanupReporter(reporter = testthat::ProgressReporter)
}
\arguments{
\item{reporter}{A testthat reporter to wrap into a new \code{CleanupReporter}
class.}
}
\value{
New reporter class  that behaves exactly like \code{reporter},
but it checks for, and optionally cleans up child processes, at the
specified granularity.
}
\description{
\code{CleanupReporter} takes an existing testthat \code{Reporter} object, and
wraps it, so it checks for leftover child processes, at the specified
place, see the \code{unit} argument below.
}
\details{
Child processes can be reported via a failed expectation, cleaned up
silently, or cleaned up and reptorted (the default).

The constructor of the \code{CleanupReporter} class has options:
\itemize{
\item \code{file}: the output file, if any, this is passed to \code{reporter}.
\item \code{unit}: when to perform the child process check and cleanup. Possible
values:
\itemize{
\item \code{"test"}: at the end of each \code{\link[testthat:test_that]{testthat::test_that()}} block
(the default),
\item \code{"testsuite"}: at the end of the test suite.
}
\item \code{process_cleanup}: Logical scalar, whether to kill the leftover
processes.
\item \code{process_fail}: Whether to create an expectation, that fails if there
are any processes alive.
\item \code{process_timeout}: How long to wait for the processes to quit. This is
sometimes needed, because even if some kill signals were sent to
child processes, it might take a short time for these to take effect.
It defaults to one second.
}
}
\note{
Some IDEs, like RStudio, start child processes frequently, and
sometimes crash when these are killed, only use this reporter in a
terminal session. In particular, you can always use it in the
idiomatic \code{testthat.R} file, that calls \code{test_check()} during
\code{R CMD check}.
}
\section{Examples}{

This is how to use this reporter in \code{testthat.R}:\preformatted{library(testthat)
library(mypackage)

if  (ps::ps_is_supported()) {
  reporter <- ps::CleanupReporter(testthat::ProgressReporter)$new(
    unit = "test", process_cleanup = TRUE)
} else {
  ## ps does not support this platform
  reporter <- "progress"
}

test_check("mypackage", reporter = reporter)
}
}


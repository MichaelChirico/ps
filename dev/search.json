[{"path":[]},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ps","title":"Contributing to ps","text":"outlines propose change ps. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to ps","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to ps","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to ps","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ps","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with ps","title":"Getting help with ps","text":"Thanks using ps. filing issue, places explore pieces put together make process smooth possible. Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site. Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed. right place, need file issue, please review “File issues” paragraph tidyverse contributing guidelines. Thanks help!","code":""},{"path":"https://ps.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jay Loden. Author. Dave Daeschler. Author. Giampaolo Rodola'. Author. Gábor Csárdi. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://ps.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Loden J, Daeschler D, Rodola' G, Csárdi G (2022). ps: List, Query, Manipulate System Processes. https://github.com/r-lib/ps#readme, https://ps.r-lib.org/.","code":"@Manual{,   title = {ps: List, Query, Manipulate System Processes},   author = {Jay Loden and Dave Daeschler and Giampaolo Rodola' and Gábor Csárdi},   year = {2022},   note = {https://github.com/r-lib/ps#readme, https://ps.r-lib.org/}, }"},{"path":"https://ps.r-lib.org/dev/header.html","id":null,"dir":"","previous_headings":"","what":"ps","title":"ps","text":"List, Query, Manipulate System Processes  ps implements API query manipulate system processes. code based psutil Python package.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"ps","dir":"","previous_headings":"","what":"List, Query, Manipulate System Processes","title":"List, Query, Manipulate System Processes","text":"List, Query, Manipulate System Processes ps implements API query manipulate system processes. code based psutil Python package. Installation Supported platforms Listing processes Query functions Process manipulation Finished zombie processes Pid reuse Find process name Wait process finish Wait several processes finish Kill process tree Terminate children Filtering sorting processes Code Conduct License","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"List, Query, Manipulate System Processes","text":"can install released version ps CRAN :","code":"install.packages(\"ps\")"},{"path":"https://ps.r-lib.org/dev/index.html","id":"supported-platforms","dir":"","previous_headings":"","what":"Supported platforms","title":"List, Query, Manipulate System Processes","text":"ps currently supports Windows (Vista), macOS Linux systems. unsupported platforms package can installed loaded, functions fail error class \"not_implemented\".","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"listing-all-processes","dir":"","previous_headings":"","what":"Listing all processes","title":"List, Query, Manipulate System Processes","text":"ps_pids() returns process ids system. can useful iterate processes. ps() returns data frame (tibble tibble package available), data process. contains handle process, ps_handle column, can use perform queries processes.","code":"library(ps) ps_pids()[1:20] ##  [1]   0   1 370 371 372 497 498 500 501 502 504 506 508 509 512 517 521 523 524 528 ps() ## # A tibble: 523 × 11 ##      pid  ppid name    username status    user  system    rss     vms created             ps_handle  ##  * <int> <int> <chr>   <chr>    <chr>    <dbl>   <dbl>  <dbl>   <dbl> <dttm>              <I<list>>  ##  1 32549     1 MRT     gaborcs… runni… 2.16e-4 3.24e-4 5.59e6 4.18e11 2022-04-23 14:53:35 <ps_handl> ##  2 32537 28512 R       gaborcs… runni… 1.04e-2 1.47e-3 1.53e8 4.19e11 2022-04-23 14:53:34 <ps_handl> ##  3 32494     1 mdwork… gaborcs… runni… 1.13e-3 3.82e-4 2.09e7 4.18e11 2022-04-23 14:53:33 <ps_handl> ##  4 32487     1 mdwork… gaborcs… runni… 7.54e-4 4.63e-4 1.38e7 4.18e11 2022-04-23 14:53:33 <ps_handl> ##  5 32486     1 mdwork… gaborcs… runni… 1.18e-3 5.54e-4 2.09e7 4.18e11 2022-04-23 14:53:33 <ps_handl> ##  6 32446  3845 Google… gaborcs… runni… 1.14e-3 4.12e-4 5.87e7 4.61e11 2022-04-23 14:53:20 <ps_handl> ##  7 32445  3845 Google… gaborcs… runni… 4.81e-4 1.91e-4 4.05e7 4.57e11 2022-04-23 14:53:17 <ps_handl> ##  8 32442  3845 Google… gaborcs… runni… 6.10e-2 6.27e-3 2.38e8 4.62e11 2022-04-23 14:53:17 <ps_handl> ##  9 32438  3845 Google… gaborcs… runni… 1.61e-3 5.20e-4 8.13e7 4.61e11 2022-04-23 14:52:57 <ps_handl> ## 10 32416     1 mdwork… gaborcs… runni… 1.50e-3 6.43e-4 2.06e7 4.18e11 2022-04-23 14:52:07 <ps_handl> ## # … with 513 more rows"},{"path":"https://ps.r-lib.org/dev/index.html","id":"process-api","dir":"","previous_headings":"","what":"Process API","title":"List, Query, Manipulate System Processes","text":"short summary API. Please see documentation various methods details, particular regarding handles finished processes pid reuse. See also “Finished zombie processes” “pid reuse” . ps_handle(pid) creates process handle supplied process id. pid omitted, handle calling process returned:","code":"p <- ps_handle() p ## <ps::ps_handle> PID=32537, NAME=R, AT=2022-04-23 14:53:34"},{"path":"https://ps.r-lib.org/dev/index.html","id":"query-functions","dir":"","previous_headings":"Process API","what":"Query functions","title":"List, Query, Manipulate System Processes","text":"ps_pid(p) returns pid process. ps_create_time() returns creation time process (according OS). process id creation time uniquely identify process system. ps uses make sure reports information , manipulates correct process. ps_is_running(p) returns whether p still running. handles pid reuse safely. ps_ppid(p) returns pid parent p. ps_parent(p) returns process handle parent process p. ps_name(p) returns name program p running. ps_exe(p) returns full path executable p running. ps_cmdline(p) returns command line (executable arguments) p. ps_status(p) returns status process. Possible values OS dependent, typically \"running\" \"stopped\". ps_username(p) returns name user process belongs . ps_uids(p) ps_gids(p) return real, effective saved user ids process. implemented POSIX systems. ps_cwd(p) returns current working directory process. ps_terminal(p) returns name terminal process, . processes without terminal, Windows returns NA_character_. ps_environ(p) returns environment variables process. ps_environ_raw(p) , different form. Typically reflect environment variables start process. ps_num_threads(p) returns current number threads process. ps_cpu_times(p) returns CPU times process, similarly proc.time(). ps_memory_info(p) returns memory usage information. See manual details. ps_children(p) lists child processes (potentially recursively) current process. ps_num_fds(p) returns number open file descriptors (handles Windows): ps_open_files(p) lists open files:","code":"ps_pid(p) ## [1] 32537 ps_create_time(p) ## [1] \"2022-04-23 14:53:34 GMT\" ps_is_running(p) ## [1] TRUE ps_ppid(p) ## [1] 28512 ps_parent(p) ## <ps::ps_handle> PID=28512, NAME=R, AT=2022-04-23 12:33:17 ps_name(p) ## [1] \"R\" ps_exe(p) ## [1] \"/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/bin/exec/R\" ps_cmdline(p) ## [1] \"/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/bin/exec/R\"             ## [2] \"--slave\"                                                                             ## [3] \"--no-save\"                                                                           ## [4] \"--no-restore\"                                                                        ## [5] \"-f\"                                                                                  ## [6] \"/var/folders/ph/fpcmzfd16rgbbk8mxvy9m2_h0000gn/T//RtmpNW4j0T/callr-scr-6f607ecfcf18\" ps_status(p) ## [1] \"running\" ps_username(p) ## [1] \"gaborcsardi\" if (ps_os_type()[[\"POSIX\"]]) ps_uids(p) ##      real effective     saved  ##       501       501       501 if (ps_os_type()[[\"POSIX\"]]) ps_gids(p) ##      real effective     saved  ##        20        20        20 ps_cwd(p) ## [1] \"/Users/gaborcsardi/works/ps\" ps_terminal(p) ## [1] NA ps_environ(p)[c(\"TERM\", \"USER\", \"SHELL\", \"R_HOME\")] ## TERM                          xterm-256color ## USER                          gaborcsardi ## SHELL                         /bin/zsh ## R_HOME                        /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources ps_num_threads(p) ## [1] 3 ps_cpu_times(p) ##            user          system   children_user children_system  ##     0.011758996     0.001636022              NA              NA ps_memory_info(p) ##          rss          vms      pfaults      pageins  ##    161431552 419165847552        10659           70 ps_children(ps_parent(p)) ## [[1]] ## <ps::ps_handle> PID=32537, NAME=R, AT=2022-04-23 14:53:34 ps_num_fds(p) ## [1] 4 f <- file(tmp <- tempfile(), \"w\") ps_num_fds(p) ## [1] 5 close(f) unlink(tmp) ps_open_files(p) ## # A tibble: 2 × 2 ##      fd path                                                                                       ##   <int> <chr>                                                                                      ## 1     0 /dev/null                                                                                  ## 2     3 /private/var/folders/ph/fpcmzfd16rgbbk8mxvy9m2_h0000gn/T/RtmpNW4j0T/callr-scr-6f607ecfcf18 f <- file(tmp <- tempfile(), \"w\") ps_open_files(p) ## # A tibble: 3 × 2 ##      fd path                                                                                       ##   <int> <chr>                                                                                      ## 1     0 /dev/null                                                                                  ## 2     3 /private/var/folders/ph/fpcmzfd16rgbbk8mxvy9m2_h0000gn/T/RtmpNW4j0T/callr-scr-6f607ecfcf18 ## 3     4 /private/var/folders/ph/fpcmzfd16rgbbk8mxvy9m2_h0000gn/T/RtmpEihKx2/file7f194ed30fc9 close(f) unlink(tmp) ps_open_files(p) ## # A tibble: 2 × 2 ##      fd path                                                                                       ##   <int> <chr>                                                                                      ## 1     0 /dev/null                                                                                  ## 2     3 /private/var/folders/ph/fpcmzfd16rgbbk8mxvy9m2_h0000gn/T/RtmpNW4j0T/callr-scr-6f607ecfcf18"},{"path":"https://ps.r-lib.org/dev/index.html","id":"process-manipulation","dir":"","previous_headings":"Process API","what":"Process manipulation","title":"List, Query, Manipulate System Processes","text":"ps_suspend(p) suspends (stops) process. POSIX sends SIGSTOP signal. Windows stops threads. ps_resume(p) resumes process. POSIX sends SIGCONT signal. Windows resumes stopped threads. ps_send_signal(p) sends signal process. implemented POSIX systems . makes effort work around pid reuse. ps_terminate(p) send SIGTERM process. POSIX systems . ps_kill(p) terminates process. Sends SIGKILL POSIX systems, uses TerminateProcess() Windows. make effort work around pid reuse. ps_interrupt(p) interrupts process. sends SIGINT signal POSIX systems, can send CTRL+C CTRL+BREAK event Windows.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"finished-and-zombie-processes","dir":"","previous_headings":"","what":"Finished and zombie processes","title":"List, Query, Manipulate System Processes","text":"ps handles finished Zombie processes much possible. essential ps_pid(), ps_create_time(), ps_is_running() functions format() print() methods work processes, including finished zombie processes. functions fail error class \"no_such_process\" finished processes. ps_ppid(), ps_parent(), ps_children(), ps_name(), ps_status(), ps_username(), ps_uids(), ps_gids(), ps_terminal(), ps_children() signal sending functions work properly zombie processes. functions fail \"zombie_process\" error.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"pid-reuse","dir":"","previous_headings":"","what":"Pid reuse","title":"List, Query, Manipulate System Processes","text":"ps functions handle pid reuse well technically possible. query functions never return information wrong process, even process finished process id re-assigned. Windows, process manipulation functions never manipulate wrong process. POSIX systems, technically impossible, possible send signal process without creating race condition. ps time window race condition small, microseconds, process need finish, OS need reuse pid within time window create problems. unlikely happen.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"recipes","dir":"","previous_headings":"","what":"Recipes","title":"List, Query, Manipulate System Processes","text":"spirit psutil recipes.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"find-process-by-name","dir":"","previous_headings":"Recipes","what":"Find process by name","title":"List, Query, Manipulate System Processes","text":"Using ps() dplyr: Without creating full table processes:","code":"library(dplyr) find_procs_by_name <- function(name) {   ps() %>%     filter(name == !!name)  %>%     pull(ps_handle) }  find_procs_by_name(\"R\") ## [[1]] ## <ps::ps_handle> PID=32537, NAME=R, AT=2022-04-23 14:53:34 ##  ## [[2]] ## <ps::ps_handle> PID=28512, NAME=R, AT=2022-04-23 12:33:17 ##  ## [[3]] ## <ps::ps_handle> PID=9278, NAME=R, AT=2022-04-19 09:56:57 find_procs_by_name <- function(name) {   procs <- lapply(ps_pids(), function(p) {     tryCatch({       h <- ps_handle(p)       if (ps_name(h) == name) h else NULL },       no_such_process = function(e) NULL,       access_denied = function(e) NULL     )   })   procs[!vapply(procs, is.null, logical(1))]   }  find_procs_by_name(\"R\") ## [[1]] ## <ps::ps_handle> PID=9278, NAME=R, AT=2022-04-19 09:56:57 ##  ## [[2]] ## <ps::ps_handle> PID=28512, NAME=R, AT=2022-04-23 12:33:17 ##  ## [[3]] ## <ps::ps_handle> PID=32537, NAME=R, AT=2022-04-23 14:53:34"},{"path":"https://ps.r-lib.org/dev/index.html","id":"wait-for-a-process-to-finish","dir":"","previous_headings":"Recipes","what":"Wait for a process to finish","title":"List, Query, Manipulate System Processes","text":"POSIX, good way wait non-child processes finish, need write sleep-wait loop . (Windows, BSD systems, including macOS, better solutions.)","code":"as_secs <- function(x) as.numeric(x, units = \"secs\")  wait_for_process <- function(proc, timeout = Inf, sleep = 0.1) {   sleep <- as_secs(sleep)   deadline <- Sys.time() + timeout   while (ps_is_running(proc) && (timeout == Inf || Sys.time() < deadline)) {     to <- min(as_secs(deadline - Sys.time()), sleep)     Sys.sleep(to)   }   ! ps_is_running(proc) }  px <- processx::process$new(\"sleep\", \"2\") p <- ps_handle(px$get_pid()) wait_for_process(p, 1) ## [1] FALSE wait_for_process(p) ## [1] TRUE"},{"path":"https://ps.r-lib.org/dev/index.html","id":"wait-for-several-processes-to-finish","dir":"","previous_headings":"Recipes","what":"Wait for several processes to finish","title":"List, Query, Manipulate System Processes","text":"similar, need wait processes loop.","code":"wait_for_processes <- function(procs, timeout = Inf) {   gone <- list()   alive <- procs   deadline <- Sys.time() + timeout    check_gone <- function(proc, timeout) {     proc_gone <- wait_for_process(proc, timeout = timeout)     if (proc_gone) {       gone <<- c(gone, list(proc))       alive <<- setdiff(alive, list(proc))     }   }    while (length(alive)) {     if (timeout <= 0) break     for (proc in alive) {       max_timeout <- 1 / length(alive)       if (timeout != Inf) {         timeout <- min(as_secs(deadline - Sys.time()), max_timeout)         if (timeout <= 0) break         check_gone(proc, timeout)       } else {         check_gone(proc, max_timeout)       }     }   }   list(gone = gone, alive = alive) }  px1 <- processx::process$new(\"sleep\", \"10\") px2 <- processx::process$new(\"sleep\", \"10\") px3 <- processx::process$new(\"sleep\", \"1\") px4 <- processx::process$new(\"sleep\", \"1\")  p1 <- ps_handle(px1$get_pid()) p2 <- ps_handle(px2$get_pid()) p3 <- ps_handle(px3$get_pid()) p4 <- ps_handle(px4$get_pid())  wait_for_processes(list(p1, p2, p3, p4), timeout = 2) ## $gone ## $gone[[1]] ## <ps::ps_handle> PID=32556, NAME=???, AT=2022-04-23 14:53:37 ##  ## $gone[[2]] ## <ps::ps_handle> PID=32555, NAME=???, AT=2022-04-23 14:53:37 ##  ##  ## $alive ## $alive[[1]] ## <ps::ps_handle> PID=32553, NAME=sleep, AT=2022-04-23 14:53:37 ##  ## $alive[[2]] ## <ps::ps_handle> PID=32554, NAME=sleep, AT=2022-04-23 14:53:37"},{"path":"https://ps.r-lib.org/dev/index.html","id":"kill-process-tree","dir":"","previous_headings":"Recipes","what":"Kill process tree","title":"List, Query, Manipulate System Processes","text":"sends signal, ’ll work Unix. Use ps_kill() instead ps_send_signal() Windows.","code":"kill_proc_tree <- function(pid, sig = signals()$SIGTERM,                            include_parent = TRUE) {   if (pid == Sys.getpid() && include_parent) stop(\"I refuse to kill myself\")   parent <- ps_handle(pid)   children <- ps_children(parent, recursive = TRUE)   if (include_parent) children <- c(children, parent)   for (p in children) ps_send_signal(p, sig)   wait_for_processes(children, timeout = 0.1) }  p1 <- processx::process$new(\"sleep\", \"10\") p2 <- processx::process$new(\"sleep\", \"10\") p3 <- processx::process$new(\"sleep\", \"10\") kill_proc_tree(Sys.getpid(), include_parent = FALSE) ## $gone ## $gone[[1]] ## <ps::ps_handle> PID=32553, NAME=???, AT=2022-04-23 14:53:37 ##  ## $gone[[2]] ## <ps::ps_handle> PID=32554, NAME=???, AT=2022-04-23 14:53:37 ##  ## $gone[[3]] ## <ps::ps_handle> PID=32561, NAME=???, AT=2022-04-23 14:53:39 ##  ## $gone[[4]] ## <ps::ps_handle> PID=32562, NAME=???, AT=2022-04-23 14:53:39 ##  ## $gone[[5]] ## <ps::ps_handle> PID=32563, NAME=???, AT=2022-04-23 14:53:39 ##  ##  ## $alive ## list()"},{"path":"https://ps.r-lib.org/dev/index.html","id":"terminate-children","dir":"","previous_headings":"Recipes","what":"Terminate children","title":"List, Query, Manipulate System Processes","text":"Note, R IDEs, including RStudio, run multithreaded R process, threads may start processes well. reap_children() clean well, potentially causing IDE misbehave crash.","code":"reap_children <- function(timeout = 3) {   procs <- ps_children(ps_handle())    ## SIGTERM   lapply(procs, ps_terminate)    ga <- wait_for_processes(procs, timeout = timeout)    ## SIGKILL to the survivers   if (length(ga$alive)) lapply(ga$alive, ps_kill)    ga2 <- wait_for_processes(ga$alive, timeout = timeout)    ## Some might still survive   list(gone = c(ga$gone, ga2$gone), alive = ga2$alive) }  pxs <- replicate(3, processx::process$new(\"sleep\", \"3\")) reap_children() ## $gone ## $gone[[1]] ## <ps::ps_handle> PID=32564, NAME=???, AT=2022-04-23 14:53:39 ##  ## $gone[[2]] ## <ps::ps_handle> PID=32565, NAME=???, AT=2022-04-23 14:53:39 ##  ## $gone[[3]] ## <ps::ps_handle> PID=32566, NAME=???, AT=2022-04-23 14:53:39 ##  ##  ## $alive ## list()"},{"path":"https://ps.r-lib.org/dev/index.html","id":"filtering-and-sorting-processes","dir":"","previous_headings":"Recipes","what":"Filtering and sorting processes","title":"List, Query, Manipulate System Processes","text":"Process name ending “sh”: Processes owned user: Processes consuming 100MB memory: Top 3 memory consuming processes: Top 3 processes consumed CPU time:","code":"ps() %>%   filter(grepl(\"sh$\", name)) ## # A tibble: 21 × 11 ##      pid  ppid name  username   status    user  system    rss     vms created             ps_handle  ##    <int> <int> <chr> <chr>      <chr>    <dbl>   <dbl>  <dbl>   <dbl> <dttm>              <I<list>>  ##  1 31628 31296 zsh   gaborcsar… runni… 3.11e-5 1.59e-4 3.34e6 4.19e11 2022-04-23 14:46:16 <ps_handl> ##  2 31296 31295 zsh   gaborcsar… runni… 2.21e-3 1.03e-3 1.17e7 4.19e11 2022-04-23 14:46:15 <ps_handl> ##  3 31176 30844 zsh   gaborcsar… runni… 1.87e-4 8.07e-4 3.46e6 4.19e11 2022-04-23 14:45:56 <ps_handl> ##  4 30844 30843 zsh   gaborcsar… runni… 3.14e-3 2.03e-3 1.26e7 4.19e11 2022-04-23 14:45:55 <ps_handl> ##  5 28331 27999 zsh   gaborcsar… runni… 9.40e-5 4.45e-4 1.79e6 4.19e11 2022-04-23 12:32:09 <ps_handl> ##  6 27999 27998 zsh   gaborcsar… runni… 2.91e-3 1.83e-3 8.00e6 4.19e11 2022-04-23 12:32:09 <ps_handl> ##  7 27624 27292 zsh   gaborcsar… runni… 2.76e-5 1.55e-4 1.03e6 4.19e11 2022-04-23 12:09:06 <ps_handl> ##  8 27292 27291 zsh   gaborcsar… runni… 2.38e-3 1.38e-3 1.87e6 4.19e11 2022-04-23 12:09:05 <ps_handl> ##  9 20941 20609 zsh   gaborcsar… runni… 1.82e-5 1.03e-4 3.44e5 4.19e11 2022-04-22 14:30:13 <ps_handl> ## 10 20609 20608 zsh   gaborcsar… runni… 2.26e-3 1.37e-3 7.54e5 4.19e11 2022-04-22 14:30:12 <ps_handl> ## # … with 11 more rows ps() %>%   filter(username == Sys.info()[[\"user\"]]) %>%   select(pid, name) ## # A tibble: 309 × 2 ##      pid name                            ##    <int> <chr>                           ##  1 32567 Google Chrome Helper (Renderer) ##  2 32558 Google Chrome Helper (Renderer) ##  3 32537 R                               ##  4 32494 mdworker_shared                 ##  5 32487 mdworker_shared                 ##  6 32486 mdworker_shared                 ##  7 32445 Google Chrome Helper            ##  8 32442 Google Chrome Helper (Renderer) ##  9 32438 Google Chrome Helper (Renderer) ## 10 32416 mdworker_shared                 ## # … with 299 more rows ps() %>%   filter(rss > 100 * 1024 * 1024) ## # A tibble: 17 × 11 ##      pid  ppid name    username status    user  system    rss     vms created             ps_handle  ##    <int> <int> <chr>   <chr>    <chr>    <dbl>   <dbl>  <dbl>   <dbl> <dttm>              <I<list>>  ##  1 32558  3845 Google… gaborcs… runni… 8.41e-3 1.35e-3 1.91e8 4.66e11 2022-04-23 14:53:39 <ps_handl> ##  2 32537 28512 R       gaborcs… runni… 1.95e-2 6.44e-3 1.81e8 4.20e11 2022-04-23 14:53:34 <ps_handl> ##  3 32442  3845 Google… gaborcs… runni… 6.14e-2 6.36e-3 2.38e8 4.62e11 2022-04-23 14:53:17 <ps_handl> ##  4 29432     1 Amazon… gaborcs… runni… 2.87e-1 5.92e-2 2.31e8 3.67e10 2022-04-23 14:38:33 <ps_handl> ##  5 28512 27999 R       gaborcs… runni… 4.73e-2 8.86e-3 2.78e8 4.19e11 2022-04-23 12:33:17 <ps_handl> ##  6 28456  3845 Google… gaborcs… runni… 6.22e-2 1.02e-2 1.69e8 4.62e11 2022-04-23 12:32:21 <ps_handl> ##  7 25580  3845 Google… gaborcs… runni… 1.47e-1 2.85e-2 1.12e8 4.66e11 2022-04-23 11:19:18 <ps_handl> ##  8 25386  3845 Google… gaborcs… runni… 7.38e-1 1.00e-1 2.75e8 4.66e11 2022-04-23 11:05:43 <ps_handl> ##  9  8796  3845 Google… gaborcs… runni… 2.87e+0 6.11e-1 2.26e8 4.66e11 2022-04-22 10:56:48 <ps_handl> ## 10  3915  3845 Google… gaborcs… runni… 1.18e+1 1.38e+0 5.21e8 4.66e11 2022-04-22 07:40:30 <ps_handl> ## 11  3904  3845 Google… gaborcs… runni… 1.49e+0 4.16e-1 2.08e8 4.61e11 2022-04-22 07:40:27 <ps_handl> ## 12  3876  3845 Google… gaborcs… runni… 1.75e+0 4.14e-1 1.15e8 4.72e11 2022-04-22 07:40:24 <ps_handl> ## 13  3865  3845 Google… gaborcs… runni… 5.77e-1 1.49e-1 1.77e8 4.66e11 2022-04-22 07:40:21 <ps_handl> ## 14  3859  3845 Google… gaborcs… runni… 3.32e+1 1.94e+1 2.35e8 4.54e11 2022-04-22 07:40:21 <ps_handl> ## 15  3845     1 Google… gaborcs… runni… 2.71e+1 9.36e+0 5.18e8 4.53e11 2022-04-22 07:40:20 <ps_handl> ## 16 97901 94806 Emacs-… gaborcs… runni… 7.64e+0 1.12e+0 1.16e8 4.20e11 2022-04-19 08:35:44 <ps_handl> ## 17 14121     1 iTerm2  gaborcs… runni… 2.04e+2 3.82e+1 5.47e8 4.21e11 2022-04-03 23:28:13 <ps_handl> ps() %>%   top_n(3, rss) %>%   arrange(desc(rss)) ## # A tibble: 3 × 11 ##     pid  ppid name        username status  user system    rss     vms created             ps_handle  ##   <int> <int> <chr>       <chr>    <chr>  <dbl>  <dbl>  <dbl>   <dbl> <dttm>              <I<list>>  ## 1 14121     1 iTerm2      gaborcs… runni… 204.   38.2  5.47e8 4.21e11 2022-04-03 23:28:13 <ps_handl> ## 2  3915  3845 Google Chr… gaborcs… runni…  11.8   1.38 5.21e8 4.66e11 2022-04-22 07:40:30 <ps_handl> ## 3  3845     1 Google Chr… gaborcs… runni…  27.1   9.36 4.85e8 4.53e11 2022-04-22 07:40:20 <ps_handl> ps() %>%   mutate(cpu_time = user + system) %>%   top_n(3, cpu_time) %>%   arrange(desc(cpu_time)) %>%   select(pid, name, cpu_time) ## # A tibble: 3 × 3 ##     pid name                 cpu_time ##   <int> <chr>                   <dbl> ## 1 14121 iTerm2                  242.  ## 2 10419 keybase                 102.  ## 3 10367 Keybase Helper (GPU)     62.3"},{"path":"https://ps.r-lib.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"List, Query, Manipulate System Processes","text":"Please note ps project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"List, Query, Manipulate System Processes","text":"MIT © RStudio","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":null,"dir":"Reference","previous_headings":"","what":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"CleanupReporter takes existing testthat Reporter object, wraps , checks leftover child processes, specified place, see proc_unit argument .","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"","code":"CleanupReporter(reporter = testthat::ProgressReporter)"},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"reporter testthat reporter wrap new CleanupReporter class.","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"New reporter class  behaves exactly like reporter, checks , optionally cleans child processes, specified granularity.","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"Child processes can reported via failed expectation, cleaned silently, cleaned reported (default). constructor CleanupReporter class options: file: output file, , passed reporter. proc_unit: perform child process check cleanup. Possible values: \"test\": end testthat::test_that() block (default), \"testsuite\": end test suite. proc_cleanup: Logical scalar, whether kill leftover processes, TRUE default. proc_fail: Whether create expectation, fails processes alive, TRUE default. proc_timeout: long wait processes quit. sometimes needed, even kill signals sent child processes, might take short time take effect. defaults one second. rconn_unit: perform R connection cleanup. Possible values \"test\" \"testsuite\", like proc_unit. rconn_cleanup: Logical scalar, whether clean leftover R connections. TRUE default. rconn_fail: Whether fail leftover R connections. TRUE default. file_unit: check open files. Possible values \"test\" \"testsuite\", like proc_unit. file_fail: Whether fail leftover open files. TRUE default. conn_unit: check open network connections. Possible values \"test\" \"testsuite\", like proc_unit. conn_fail: Whether fail leftover network connections. TRUE default.","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"IDEs, like RStudio, start child processes frequently, sometimes crash killed, use reporter terminal session. particular, can always use idiomatic testthat.R file, calls test_check() R CMD check.","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"use reporter testthat.R:","code":""},{"path":"https://ps.r-lib.org/dev/reference/errno.html","id":null,"dir":"Reference","previous_headings":"","what":"List of 'errno' error codes — errno","title":"List of 'errno' error codes — errno","text":"errors used current platform, value NA_integer_.","code":""},{"path":"https://ps.r-lib.org/dev/reference/errno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of 'errno' error codes — errno","text":"","code":"errno()"},{"path":"https://ps.r-lib.org/dev/reference/errno.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of 'errno' error codes — errno","text":"data frame columns: name, value, description.","code":""},{"path":"https://ps.r-lib.org/dev/reference/errno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of 'errno' error codes — errno","text":"","code":"errno() #>                name value #> 1             E2BIG     7 #> 2            EACCES    13 #> 3        EADDRINUSE    98 #> 4     EADDRNOTAVAIL    99 #> 5              EADV    68 #> 6      EAFNOSUPPORT    97 #> 7            EAGAIN    11 #> 8          EALREADY   114 #> 9             EAUTH    NA #> 10      EBACKGROUND    NA #> 11         EBADARCH    NA #> 12            EBADE    52 #> 13         EBADEXEC    NA #> 14            EBADF     9 #> 15           EBADFD    77 #> 16        EBADMACHO    NA #> 17          EBADMSG    74 #> 18            EBADR    53 #> 19          EBADRPC    NA #> 20          EBADRQC    56 #> 21          EBADSLT    57 #> 22           EBFONT    59 #> 23            EBUSY    16 #> 24        ECANCELED   125 #> 25           ECHILD    10 #> 26           ECHRNG    44 #> 27            ECOMM    70 #> 28     ECONNABORTED   103 #> 29     ECONNREFUSED   111 #> 30       ECONNRESET   104 #> 31               ED    NA #> 32          EDEADLK    35 #> 33        EDEADLOCK    35 #> 34     EDESTADDRREQ    89 #> 35          EDEVERR    NA #> 36            EDIED    NA #> 37             EDOM    33 #> 38          EDOTDOT    73 #> 39           EDQUOT   122 #> 40           EEXIST    17 #> 41           EFAULT    14 #> 42            EFBIG    27 #> 43           EFTYPE    NA #> 44      EGRATUITOUS    NA #> 45        EGREGIOUS    NA #> 46        EHOSTDOWN   112 #> 47     EHOSTUNREACH   113 #> 48        EHWPOISON   133 #> 49            EIDRM    43 #> 50            EIEIO    NA #> 51           EILSEQ    84 #> 52      EINPROGRESS   115 #> 53            EINTR     4 #> 54           EINVAL    22 #> 55              EIO     5 #> 56          EISCONN   106 #> 57           EISDIR    21 #> 58           EISNAM   120 #> 59      EKEYEXPIRED   127 #> 60     EKEYREJECTED   129 #> 61      EKEYREVOKED   128 #> 62           EL2HLT    51 #> 63         EL2NSYNC    45 #> 64           EL3HLT    46 #> 65           EL3RST    47 #> 66          ELIBACC    79 #> 67          ELIBBAD    80 #> 68         ELIBEXEC    83 #> 69          ELIBMAX    82 #> 70          ELIBSCN    81 #> 71           ELNRNG    48 #> 72            ELOOP    40 #> 73      EMEDIUMTYPE   124 #> 74           EMFILE    24 #> 75           EMLINK    31 #> 76         EMSGSIZE    90 #> 77        EMULTIHOP    72 #> 78     ENAMETOOLONG    36 #> 79          ENAVAIL   119 #> 80        ENEEDAUTH    NA #> 81         ENETDOWN   100 #> 82        ENETRESET   102 #> 83      ENETUNREACH   101 #> 84           ENFILE    23 #> 85           ENOANO    55 #> 86          ENOATTR    NA #> 87          ENOBUFS   105 #> 88           ENOCSI    50 #> 89          ENODATA    61 #> 90           ENODEV    19 #> 91           ENOENT     2 #> 92          ENOEXEC     8 #> 93           ENOKEY   126 #> 94           ENOLCK    37 #> 95          ENOLINK    67 #> 96        ENOMEDIUM   123 #> 97           ENOMEM    12 #> 98           ENOMSG    42 #> 99           ENONET    64 #> 100          ENOPKG    65 #> 101     ENOPROTOOPT    92 #> 102          ENOSPC    28 #> 103           ENOSR    63 #> 104          ENOSTR    60 #> 105          ENOSYS    38 #> 106         ENOTBLK    15 #> 107        ENOTCONN   107 #> 108         ENOTDIR    20 #> 109       ENOTEMPTY    39 #> 110         ENOTNAM   118 #> 111 ENOTRECOVERABLE   131 #> 112        ENOTSOCK    88 #> 113         ENOTSUP    95 #> 114          ENOTTY    25 #> 115        ENOTUNIQ    76 #> 116           ENXIO     6 #> 117      EOPNOTSUPP    95 #> 118       EOVERFLOW    75 #> 119      EOWNERDEAD   130 #> 120           EPERM     1 #> 121    EPFNOSUPPORT    96 #> 122           EPIPE    32 #> 123        EPROCLIM    NA #> 124    EPROCUNAVAIL    NA #> 125   EPROGMISMATCH    NA #> 126    EPROGUNAVAIL    NA #> 127          EPROTO    71 #> 128 EPROTONOSUPPORT    93 #> 129      EPROTOTYPE    91 #> 130         EPWROFF    NA #> 131          ERANGE    34 #> 132         EREMCHG    78 #> 133         EREMOTE    66 #> 134       EREMOTEIO   121 #> 135        ERESTART    85 #> 136         ERFKILL   132 #> 137           EROFS    30 #> 138    ERPCMISMATCH    NA #> 139      ESHLIBVERS    NA #> 140       ESHUTDOWN   108 #> 141 ESOCKTNOSUPPORT    94 #> 142          ESPIPE    29 #> 143           ESRCH     3 #> 144          ESRMNT    69 #> 145          ESTALE   116 #> 146        ESTRPIPE    86 #> 147           ETIME    62 #> 148       ETIMEDOUT   110 #> 149    ETOOMANYREFS   109 #> 150         ETXTBSY    26 #> 151         EUCLEAN   117 #> 152         EUNATCH    49 #> 153          EUSERS    87 #> 154     EWOULDBLOCK    11 #> 155           EXDEV    18 #> 156          EXFULL    54 #>                                             description #> 1                                    Arg list too long. #> 2                                    Permission denied. #> 3                               Address already in use. #> 4                      Cannot assign requested address. #> 5                                      Advertise error. #> 6      Address family not supported by protocol family. #> 7                     Resource temporarily unavailable. #> 8                        Operation already in progress. #> 9                                 Authentication error. #> 10           Caller not in the foreground process group #> 11                          Bad CPU type in executable. #> 12                                    Invalid exchange. #> 13                  Bad executable (or shared library). #> 14                                 Bad file descriptor. #> 15                        File descriptor in bad state. #> 16                               Malformed Mach-o file. #> 17                                         Bad message. #> 18                          Invalid request descriptor. #> 19                                   RPC struct is bad. #> 20                                Invalid request code. #> 21                                        Invalid slot. #> 22                                Bad font file format. #> 23                                       Resource busy. #> 24                                  Operation canceled. #> 25                                  No child processes. #> 26                         Channel number out of range. #> 27                         Communication error on send. #> 28                    Software caused connection abort. #> 29                                  Connection refused. #> 30                            Connection reset by peer. #> 31   The experienced user will know what is wrong.#else #> 32                           Resource deadlock avoided. #> 33                         File locking deadlock error. #> 34                        Destination address required. #> 35                                        Device error. #> 36                                      Translator died #> 37                    Numerical argument out of domain. #> 38                                   RFS specific error #> 39                                 Disc quota exceeded. #> 40                                         File exists. #> 41                                         Bad address. #> 42                                      File too large. #> 43                   Inappropriate file type or format. #> 44                      This error code has no purpose. #> 45                                      You did *what*? #> 46                                        Host is down. #> 47                                    No route to host. #> 48                      Memory page has hardware error. #> 49                                  Identifier removed. #> 50  Go home and have a glass of warm, dairy-fresh milk. #> 51                               Illegal byte sequence. #> 52                           Operation now in progress. #> 53                           Interrupted function call. #> 54                                    Invalid argument. #> 55                                  Input/output error. #> 56                         Socket is already connected. #> 57                                      Is a directory. #> 58                                Is a named type file. #> 59                                     Key has expired. #> 60                         Key was rejected by service. #> 61                                Key has been revoked. #> 62                                      Level 2 halted. #> 63                            Level 2 not synchronized. #> 64                                      Level 3 halted. #> 65                                       Level 3 reset. #> 66              Can not access a needed shared library. #> 67                Accessing a corrupted shared library. #> 68               Cannot exec a shared library directly. #> 69     Attempting to link in too many shared libraries. #> 70                     .lib section in a.out corrupted. #> 71                            Link number out of range. #> 72                   Too many levels of symbolic links. #> 73                                   Wrong medium type. #> 74                                 Too many open files. #> 75                                      Too many links. #> 76                                    Message too long. #> 77                                  Multihop attempted. #> 78                                  File name too long. #> 79                       No XENIX semaphores available. #> 80                                  Need authenticator. #> 81                                     Network is down. #> 82                 Network dropped connection on reset. #> 83                              Network is unreachable. #> 84                       Too many open files in system. #> 85                                            No anode. #> 86                                 Attribute not found. #> 87                           No buffer space available. #> 88                          No CSI structure available. #> 89                                No message available. #> 90                   Operation not supported by device. #> 91                           No such file or directory. #> 92                                   Exec format error. #> 93                          Required key not available. #> 94                                  No locks available. #> 95                               Link has been severed. #> 96                                     No medium found. #> 97                              Cannot allocate memory. #> 98                          No message of desired type. #> 99                       Machine is not on the network. #> 100                              Package not installed. #> 101                             Protocol not available. #> 102                                Device out of space. #> 103                           Out of streams resources. #> 104                                       Not a STREAM. #> 105                           Function not implemented. #> 106                                 Not a block device. #> 107                            Socket is not connected. #> 108                                    Not a directory. #> 109                                Directory not empty. #> 110                        Not a XENIX named type file. #> 111                              State not recoverable. #> 112                     Socket operation on non-socket. #> 113                                      Not supported. #> 114                     Inappropriate ioctl for device. #> 115                         Name not unique on network. #> 116                          No such device or address. #> 117                  Operation not supported on socket. #> 118          Value too large to be stored in data type. #> 119                                         Owner died. #> 120                            Operation not permitted. #> 121                      Protocol family not supported. #> 122                                        Broken pipe. #> 123                                 Too many processes. #> 124                          Bad procedure for program. #> 125                              Program version wrong. #> 126                                RPC prog. not avail. #> 127                                     Protocol error. #> 128                             Protocol not supported. #> 129                     Protocol wrong type for socket. #> 130                                Device power is off. #> 131                      Numerical result out of range. #> 132                             Remote address changed. #> 133                         File is already NFS-mounted #> 134                                   Remote I/O error. #> 135        Interrupted system call should be restarted. #> 136              Operation not possible due to RF-kill. #> 137                              Read-only file system. #> 138                                  RPC version wrong. #> 139                    Shared library version mismatch. #> 140                  Cannot send after socket shutdown. #> 141                          Socket type not supported. #> 142                                       Illegal seek. #> 143                                    No such process. #> 144                                      Srmount error. #> 145                              Stale NFS file handle. #> 146                                 Streams pipe error. #> 147                             STREAM ioctl() timeout. #> 148                                Operation timed out. #> 149                 Too many references: cannot splice. #> 150                                     Text file busy. #> 151                           Structure needs cleaning. #> 152                       Protocol driver not attached. #> 153                                     Too many users. #> 154                   Resource temporarily unavailable. #> 155                                      Improper link. #> 156                                      Exchange full."},{"path":"https://ps.r-lib.org/dev/reference/ps-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ps: List, Query, Manipulate System Processes — ps-package","title":"ps: List, Query, Manipulate System Processes — ps-package","text":"List, query manipulate system processes, 'Windows', 'Linux' 'macOS'.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ps: List, Query, Manipulate System Processes — ps-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com Authors: Jay Loden Dave Daeschler Giampaolo Rodola' contributors: RStudio [copyright holder, funder]","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Process table — ps","title":"Process table — ps","text":"Process table","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process table — ps","text":"","code":"ps(user = NULL, after = NULL)"},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process table — ps","text":"user Username, filter results matching processes. Start time (POSIXt), filter results processes started .","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process table — ps","text":"Data frame (tibble), see columns . Columns: pid: Process ID. ppid: Process ID parent process. name: Process name. username: Name user (real uid POSIX). status: .e. running, sleeping, etc. user: User CPU time. system: System CPU time. rss: Resident set size, amount memory process currently uses. include memory swapped . include shared libraries. vms: Virtual memory size. memory process access . created: Time stamp process created. ps_handle: ps_handle objects, list column.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_boot_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Boot time of the system — ps_boot_time","title":"Boot time of the system — ps_boot_time","text":"Boot time system","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_boot_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boot time of the system — ps_boot_time","text":"","code":"ps_boot_time()"},{"path":"https://ps.r-lib.org/dev/reference/ps_boot_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boot time of the system — ps_boot_time","text":"POSIXct object.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":null,"dir":"Reference","previous_headings":"","what":"List of child processes (process objects) of the process. Note that\nthis typically requires enumerating all processes on the system, so\nit is a costly operation. — ps_children","title":"List of child processes (process objects) of the process. Note that\nthis typically requires enumerating all processes on the system, so\nit is a costly operation. — ps_children","text":"List child processes (process objects) process. Note typically requires enumerating processes system, costly operation.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of child processes (process objects) of the process. Note that\nthis typically requires enumerating all processes on the system, so\nit is a costly operation. — ps_children","text":"","code":"ps_children(p = ps_handle(), recursive = FALSE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of child processes (process objects) of the process. Note that\nthis typically requires enumerating all processes on the system, so\nit is a costly operation. — ps_children","text":"p Process handle. recursive Whether include children children, etc.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of child processes (process objects) of the process. Note that\nthis typically requires enumerating all processes on the system, so\nit is a costly operation. — ps_children","text":"List ps_handle objects.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of child processes (process objects) of the process. Note that\nthis typically requires enumerating all processes on the system, so\nit is a costly operation. — ps_children","text":"","code":"p <- ps_parent(ps_handle()) ps_children(p) #> [[1]] #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 #>"},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":null,"dir":"Reference","previous_headings":"","what":"Command line of the process — ps_cmdline","title":"Command line of the process — ps_cmdline","text":"Command line process, .e. executable command line arguments, character vector. Unix program might change command line, programs actually .","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Command line of the process — ps_cmdline","text":"","code":"ps_cmdline(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Command line of the process — ps_cmdline","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Command line of the process — ps_cmdline","text":"Character vector.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Command line of the process — ps_cmdline","text":"zombie process throws zombie_process error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Command line of the process — ps_cmdline","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_name(p) #> [1] \"R\" ps_exe(p) #> [1] \"/opt/R/4.2.0/lib/R/bin/exec/R\" ps_cmdline(p) #> [1] \"/opt/R/4.2.0/lib/R/bin/exec/R\"                                       #> [2] \"--no-echo\"                                                           #> [3] \"--no-restore\"                                                        #> [4] \"--file=/home/runner/work/_temp/998477a2-1122-4b78-8054-537f1114bc8d\""},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":null,"dir":"Reference","previous_headings":"","what":"List network connections of a process — ps_connections","title":"List network connections of a process — ps_connections","text":"zombie process throws zombie_process error.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List network connections of a process — ps_connections","text":"","code":"ps_connections(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List network connections of a process — ps_connections","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List network connections of a process — ps_connections","text":"Data frame, tibble tibble package available, columns: fd: integer file descriptor POSIX systems, NA Windows. family: Address family, string, typically AF_UNIX, AF_INET AF_INET6. type: Socket type, string, typically SOCK_STREAM (TCP) SOCK_DGRAM (UDP). laddr: Local address, string, NA UNIX sockets. lport: Local port, integer, NA UNIX sockets. raddr: Remote address, string, NA UNIX sockets. always NA AF_INET sockets Linux. rport: Remote port, integer, NA UNIX sockets. state: Socket state, e.g. CONN_ESTABLISHED, etc. NA UNIX sockets.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List network connections of a process — ps_connections","text":"","code":"p <- ps_handle() ps_connections(p) #> # A tibble: 7 × 8 #>      fd family  type        laddr                  lport raddr rport state #>   <int> <chr>   <chr>       <chr>                  <int> <chr> <int> <chr> #> 1     8 AF_UNIX SOCK_STREAM /tmp/dotnet-diagnosti…    NA NA       NA NA    #> 2    12 AF_UNIX SOCK_STREAM NA                        NA NA       NA NA    #> 3    11 AF_UNIX SOCK_STREAM NA                        NA NA       NA NA    #> 4    13 AF_INET SOCK_STREAM 10.1.0.180             40508 13.3…   443 CONN… #> 5    15 AF_INET SOCK_STREAM 10.1.0.180             57262 142.…   443 CONN… #> 6    14 AF_INET SOCK_STREAM 10.1.0.180             36274 142.…   443 CONN… #> 7    16 AF_INET SOCK_STREAM 10.1.0.180             38238 13.3…    80 CONN… sc <- socketConnection(\"httpbin.org\", port = 80) ps_connections(p) #> # A tibble: 8 × 8 #>      fd family  type        laddr                  lport raddr rport state #>   <int> <chr>   <chr>       <chr>                  <int> <chr> <int> <chr> #> 1     8 AF_UNIX SOCK_STREAM /tmp/dotnet-diagnosti…    NA NA       NA NA    #> 2    12 AF_UNIX SOCK_STREAM NA                        NA NA       NA NA    #> 3    11 AF_UNIX SOCK_STREAM NA                        NA NA       NA NA    #> 4    13 AF_INET SOCK_STREAM 10.1.0.180             40508 13.3…   443 CONN… #> 5    15 AF_INET SOCK_STREAM 10.1.0.180             57262 142.…   443 CONN… #> 6    14 AF_INET SOCK_STREAM 10.1.0.180             36274 142.…   443 CONN… #> 7    16 AF_INET SOCK_STREAM 10.1.0.180             38238 13.3…    80 CONN… #> 8    17 AF_INET SOCK_STREAM 10.1.0.180             51260 18.2…    80 CONN… close(sc) ps_connections(p) #> # A tibble: 7 × 8 #>      fd family  type        laddr                  lport raddr rport state #>   <int> <chr>   <chr>       <chr>                  <int> <chr> <int> <chr> #> 1     8 AF_UNIX SOCK_STREAM /tmp/dotnet-diagnosti…    NA NA       NA NA    #> 2    12 AF_UNIX SOCK_STREAM NA                        NA NA       NA NA    #> 3    11 AF_UNIX SOCK_STREAM NA                        NA NA       NA NA    #> 4    13 AF_INET SOCK_STREAM 10.1.0.180             40508 13.3…   443 CONN… #> 5    15 AF_INET SOCK_STREAM 10.1.0.180             57262 142.…   443 CONN… #> 6    14 AF_INET SOCK_STREAM 10.1.0.180             36274 142.…   443 CONN… #> 7    16 AF_INET SOCK_STREAM 10.1.0.180             38238 13.3…    80 CONN…"},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of logical or physical CPUs — ps_cpu_count","title":"Number of logical or physical CPUs — ps_cpu_count","text":"determined, returns NA. also returns NA older Windows systems, e.g. Vista older Windows Server 2008 older.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of logical or physical CPUs — ps_cpu_count","text":"","code":"ps_cpu_count(logical = TRUE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of logical or physical CPUs — ps_cpu_count","text":"logical Whether count logical CPUs.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of logical or physical CPUs — ps_cpu_count","text":"Integer scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of logical or physical CPUs — ps_cpu_count","text":"","code":"ps_cpu_count(logical = TRUE) #> [1] 2 ps_cpu_count(logical = FALSE) #> [1] 2"},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":null,"dir":"Reference","previous_headings":"","what":"CPU times of the process — ps_cpu_times","title":"CPU times of the process — ps_cpu_times","text":"times measured seconds: user: Amount time process scheduled user mode. system: Amount time process scheduled kernel mode children_user: Linux, amount time process's waited-children scheduled user mode. children_system: Linux, Amount time process's waited-children scheduled kernel mode.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CPU times of the process — ps_cpu_times","text":"","code":"ps_cpu_times(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CPU times of the process — ps_cpu_times","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CPU times of the process — ps_cpu_times","text":"Named real vector length four: user, system, children_user,  children_system. last two NA non-Linux systems.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CPU times of the process — ps_cpu_times","text":"Throws zombie_process() error zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CPU times of the process — ps_cpu_times","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_cpu_times(p) #>            user          system   children_user children_system  #>            6.06            0.23            0.89            0.48  proc.time() #>    user  system elapsed  #>   6.965   0.722  10.786"},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Start time of a process — ps_create_time","title":"Start time of a process — ps_create_time","text":"pid start time pair serves identifier process, process ids might reused, chance starting two processes identical ids within resolution timer minimal.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start time of a process — ps_create_time","text":"","code":"ps_create_time(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start time of a process — ps_create_time","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start time of a process — ps_create_time","text":"POSIXct object, start time, GMT.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start time of a process — ps_create_time","text":"function works even process already finished.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start time of a process — ps_create_time","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_create_time(p) #> [1] \"2022-04-27 06:24:21 GMT\""},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":null,"dir":"Reference","previous_headings":"","what":"Process current working directory as an absolute path. — ps_cwd","title":"Process current working directory as an absolute path. — ps_cwd","text":"zombie process throws zombie_process error.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process current working directory as an absolute path. — ps_cwd","text":"","code":"ps_cwd(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process current working directory as an absolute path. — ps_cwd","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process current working directory as an absolute path. — ps_cwd","text":"String scalar.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process current working directory as an absolute path. — ps_cwd","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_cwd(p) #> [1] \"/home/runner/work/ps/ps/docs/dev/reference\""},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the ancestry of a process — ps_descent","title":"Query the ancestry of a process — ps_descent","text":"Query parent processes recursively, first process. (platforms, like Windows, process tree tree may contain loops, case ps_descent() goes first repetition.)","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the ancestry of a process — ps_descent","text":"","code":"ps_descent(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the ancestry of a process — ps_descent","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the ancestry of a process — ps_descent","text":"list process handles, starting p, one parent process previous one.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the ancestry of a process — ps_descent","text":"","code":"ps_descent() #> [[1]] #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 #>  #> [[2]] #> <ps::ps_handle> PID=1467, NAME=Runner.Worker, AT=2022-04-27 06:21:59 #>  #> [[3]] #> <ps::ps_handle> PID=1449, NAME=Runner.Listener, AT=2022-04-27 06:21:55 #>  #> [[4]] #> <ps::ps_handle> PID=688, NAME=provisioner, AT=2022-04-27 06:21:41 #>  #> [[5]] #> <ps::ps_handle> PID=1, NAME=systemd, AT=2022-04-27 06:21:33 #>"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":null,"dir":"Reference","previous_headings":"","what":"List all mounted partitions — ps_disk_partitions","title":"List all mounted partitions — ps_disk_partitions","text":"output similar Unix mount df commands.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all mounted partitions — ps_disk_partitions","text":"","code":"ps_disk_partitions(all = FALSE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all mounted partitions — ps_disk_partitions","text":"Whether list virtual devices well. FALSE, Linux still list overlay grpcfuse file systems, provide useful information Docker containers.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all mounted partitions — ps_disk_partitions","text":"data frame (tibble) columns device, mountpoint, fstype options.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all mounted partitions — ps_disk_partitions","text":"","code":"ps_disk_partitions(all = TRUE) #> # A tibble: 41 × 4 #>    device     mountpoint           fstype     options                      #>    <chr>      <chr>                <chr>      <chr>                        #>  1 /dev/root  /                    ext4       rw,relatime,discard          #>  2 devtmpfs   /dev                 devtmpfs   rw,relatime,size=3552992k,n… #>  3 sysfs      /sys                 sysfs      rw,nosuid,nodev,noexec,rela… #>  4 proc       /proc                proc       rw,nosuid,nodev,noexec,rela… #>  5 securityfs /sys/kernel/security securityfs rw,nosuid,nodev,noexec,rela… #>  6 tmpfs      /dev/shm             tmpfs      rw,nosuid,nodev,inode64      #>  7 devpts     /dev/pts             devpts     rw,nosuid,noexec,relatime,g… #>  8 tmpfs      /run                 tmpfs      rw,nosuid,nodev,size=711316… #>  9 tmpfs      /run/lock            tmpfs      rw,nosuid,nodev,noexec,rela… #> 10 tmpfs      /sys/fs/cgroup       tmpfs      ro,nosuid,nodev,noexec,mode… #> # … with 31 more rows ps_disk_partitions() #> # A tibble: 6 × 4 #>   device     mountpoint        fstype   options                            #> * <chr>      <chr>             <chr>    <chr>                              #> 1 /dev/root  /                 ext4     rw,relatime,discard                #> 2 /dev/loop0 /snap/lxd/22753   squashfs ro,nodev,relatime                  #> 3 /dev/loop1 /snap/core20/1405 squashfs ro,nodev,relatime                  #> 4 /dev/loop2 /snap/snapd/15177 squashfs ro,nodev,relatime                  #> 5 /dev/sda15 /boot/efi         vfat     rw,relatime,fmask=0077,dmask=0077… #> 6 /dev/sdb1  /mnt              ext4     rw,relatime"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Disk usage statistics, per partition — ps_disk_usage","title":"Disk usage statistics, per partition — ps_disk_usage","text":"output similar Unix df command.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disk usage statistics, per partition — ps_disk_usage","text":"","code":"ps_disk_usage(paths = ps_disk_partitions()$mountpoint)"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disk usage statistics, per partition — ps_disk_usage","text":"paths mounted file systems list. default file systems returned ps_disk_partitions() listed.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disk usage statistics, per partition — ps_disk_usage","text":"data frame columns mountpoint, total, used, available capacity.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Disk usage statistics, per partition — ps_disk_usage","text":"Note Unix small percentage disk space (5% typically) reserved superuser. ps_disk_usage() returns space available calling user.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disk usage statistics, per partition — ps_disk_usage","text":"","code":"ps_disk_usage() #> # A tibble: 6 × 5 #>   mountpoint              total        used   available capacity #>   <chr>                   <dbl>       <dbl>       <dbl>    <dbl> #> 1 /                 89311358976 56835047424 32493088768   0.636  #> 2 /snap/lxd/22753      71172096    71172096           0   1      #> 3 /snap/core20/1405    65011712    65011712           0   1      #> 4 /snap/snapd/15177    45875200    45875200           0   1      #> 5 /boot/efi           109422592     5448704   103973888   0.0498 #> 6 /mnt              14727258112  5105233920 10390315008   0.329"},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment variables of a process — ps_environ","title":"Environment variables of a process — ps_environ","text":"ps_environ() returns environment variables process, named vector, similarly return value Sys.getenv() (without arguments).","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment variables of a process — ps_environ","text":"","code":"ps_environ(p = ps_handle())  ps_environ_raw(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Environment variables of a process — ps_environ","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Environment variables of a process — ps_environ","text":"ps_environ() returns named character vector (Dlist class, printed nicely), ps_environ_raw() returns character vector.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Environment variables of a process — ps_environ","text":"Note: usually reflect changes made process started. ps_environ_raw() similar p$environ() returns unparsed \"var=value\" strings. faster, sometimes good enough. functions throw zombie_process error zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Environment variables of a process — ps_environ","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 env <- ps_environ(p) env[[\"R_HOME\"]] #> [1] \"/opt/R/4.2.0/lib/R\""},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":null,"dir":"Reference","previous_headings":"","what":"Full path of the executable of a process — ps_exe","title":"Full path of the executable of a process — ps_exe","text":"Path executable process. May also empty string NA determined.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full path of the executable of a process — ps_exe","text":"","code":"ps_exe(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full path of the executable of a process — ps_exe","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full path of the executable of a process — ps_exe","text":"Character scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Full path of the executable of a process — ps_exe","text":"zombie process throws zombie_process error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full path of the executable of a process — ps_exe","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_name(p) #> [1] \"R\" ps_exe(p) #> [1] \"/opt/R/4.2.0/lib/R/bin/exec/R\" ps_cmdline(p) #> [1] \"/opt/R/4.2.0/lib/R/bin/exec/R\"                                       #> [2] \"--no-echo\"                                                           #> [3] \"--no-restore\"                                                        #> [4] \"--file=/home/runner/work/_temp/998477a2-1122-4b78-8054-537f1114bc8d\""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":null,"dir":"Reference","previous_headings":"","what":"Query or set CPU affinity — ps_get_cpu_affinity","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"ps_get_cpu_affinity() queries CPU affinity process. ps_set_cpu_affinity() sets CPU affinity process.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"","code":"ps_get_cpu_affinity(p = ps_handle())  ps_set_cpu_affinity(p = ps_handle(), affinity)"},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"p Process handle. affinity Integer vector CPU numbers restrict process . CPU numbers start zero, smaller number (logical) CPUs, see ps_cpu_count().","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"ps_get_cpu_affinity() returns integer vector CPU numbers, starting zero. ps_set_cpu_affinity() returns NULL, invisibly.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"CPU affinity consists telling OS run process limited set CPUs (Linux cmdline, taskset command typically used). functions supported Linux Windows. error macOS.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"","code":"# current orig <- ps_get_cpu_affinity() orig #> [1] 0 1  # restrict ps_set_cpu_affinity(affinity = 0:0) ps_get_cpu_affinity() #> [1] 0  # restore ps_set_cpu_affinity(affinity = orig) ps_get_cpu_affinity() #> [1] 0 1"},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the priority of a process — ps_windows_nice_values","title":"Get or set the priority of a process — ps_windows_nice_values","text":"ps_get_nice() returns current priority, ps_set_nice() sets new priority, ps_windows_nice_values() list possible priority values Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the priority of a process — ps_windows_nice_values","text":"","code":"ps_windows_nice_values()  ps_get_nice(p = ps_handle())  ps_set_nice(p = ps_handle(), value)"},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the priority of a process — ps_windows_nice_values","text":"p Process handle. value Windows must string, one values ps_windows_nice_values(). Unix priority value smaller equal 20.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the priority of a process — ps_windows_nice_values","text":"ps_windows_nice_values() return character vector possible priority values Windows. ps_get_nice() returns string ps_windows_nice_values() Windows. Unix returns integer smaller equal 20. ps_set_nice() return NULL invisibly.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or set the priority of a process — ps_windows_nice_values","text":"Priority values different Windows Unix. Unix, priority integer, maximum 20. 20 lowest priority.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"rules-","dir":"Reference","previous_headings":"","what":"Rules:","title":"Get or set the priority of a process — ps_windows_nice_values","text":"Windows can set priority processes current user PROCESS_SET_INFORMATION access rights . typically means processes. Unix can set priority processes. superuser can set priority process. Unix set higher priority, unless superuser. (.e. set lower number.) Unix default priority process zero.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a process handle — ps_handle","title":"Create a process handle — ps_handle","text":"Create process handle","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a process handle — ps_handle","text":"","code":"ps_handle(pid = NULL, time = NULL)  # S3 method for ps_handle as.character(x, ...)  # S3 method for ps_handle format(x, ...)  # S3 method for ps_handle print(x, ...)"},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a process handle — ps_handle","text":"pid Process id. Integer scalar. NULL means current R process. time Start time process. Usually NULL ps query start time. x Process handle. ... used currently.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a process handle — ps_handle","text":"ps_handle() returns process handle (class ps_handle).","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a process handle — ps_handle","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21"},{"path":"https://ps.r-lib.org/dev/reference/ps_interrupt.html","id":null,"dir":"Reference","previous_headings":"","what":"Interrupt a process — ps_interrupt","title":"Interrupt a process — ps_interrupt","text":"Sends SIGINT POSIX, 'CTRL+C' 'CTRL+BREAK' Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_interrupt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interrupt a process — ps_interrupt","text":"","code":"ps_interrupt(p = ps_handle(), ctrl_c = TRUE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_interrupt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interrupt a process — ps_interrupt","text":"p Process handle. ctrl_c Windows, whether send 'CTRL+C'. FALSE, 'CTRL+BREAK' sent. Ignored non-Windows platforms.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether a process is running — ps_is_running","title":"Checks whether a process is running — ps_is_running","text":"returns FALSE process already finished.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether a process is running — ps_is_running","text":"","code":"ps_is_running(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether a process is running — ps_is_running","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether a process is running — ps_is_running","text":"Logical scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks whether a process is running — ps_is_running","text":"uses start time process work around pid reuse. .e.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether a process is running — ps_is_running","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_is_running(p) #> [1] TRUE"},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":null,"dir":"Reference","previous_headings":"","what":"Kill a process — ps_kill","title":"Kill a process — ps_kill","text":"Kill current process SIGKILL preemptively checking whether PID reused. Windows uses TerminateProcess().","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kill a process — ps_kill","text":"","code":"ps_kill(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kill a process — ps_kill","text":"p Process handle.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kill a process — ps_kill","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=12407, NAME=sleep, AT=2022-04-27 06:24:35 ps_kill(p) #> NULL p #> <ps::ps_handle> PID=12407, NAME=???, AT=2022-04-27 06:24:35 ps_is_running(p) #> [1] FALSE px$get_exit_status() #> [1] -9"},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a process and its (future) child tree — ps_mark_tree","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"ps_mark_tree() generates random environment variable name sets  current R process. environment variable (default) inherited child (grandchild, etc.) processes, help finding processes, even (longer) related current R process. (.e. connected process tree.)","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"","code":"ps_mark_tree()  with_process_cleanup(expr)  ps_find_tree(marker)  ps_kill_tree(marker, sig = signals()$SIGKILL)"},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"expr R expression evaluate new context. marker String scalar, name environment variable use find marked processes. sig signal send marked processes Unix. Windows argument ignored currently.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"ps_mark_tree() returns name environment variable, can used marker ps_kill_tree(). ps_find_tree() returns list ps_handle objects. ps_kill_tree() returns pids killed processes, named integer vector. names file names executables, available. with_process_cleanup() returns value evaluated expression.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"ps_find_tree() finds processes set supplied environment variable returns list. ps_kill_tree() finds processes set supplied environment variable, kills (sends specified signal Unix). with_process_cleanup() evaluates R expression, cleans external processes started R process evaluating expression. includes child processes child processes, etc., recursively. returns list entries: result result expression, visible TRUE expression printed screen, process_cleanup named integer vector cleaned pids, names process names. expr throws error, with_process_cleanup(), error. Nevertheless processes still cleaned .","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"Note with_process_cleanup() problematic R process multi-threaded threads start subprocesses. with_process_cleanup() cleans processes well, probably want. issue example RStudio. use with_process_cleanup(), unless sure R process single-threaded, threads start subprocesses. E.g. using package test cases usually fine, RStudio runs separate single-threaded process. holds manually running ps_mark_tree() ps_find_tree() ps_kill_tree(). safe way use process cleanup use processx package start subprocesses, set cleanup_tree = TRUE processx::run() processx::process constructor.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_loadavg.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the average system load over the last 1, 5 and 15 minutes as a\ntuple. — ps_loadavg","title":"Return the average system load over the last 1, 5 and 15 minutes as a\ntuple. — ps_loadavg","text":"“load” represents processes runnable state, either using CPU waiting use CPU (e.g. waiting disk /O). Windows emulated using Windows API spawns thread keeps running background updates results every 5 seconds, mimicking UNIX behavior. Thus, Windows, first time called next 5 seconds return meaningless (0.0, 0.0, 0.0) vector. numbers returned make sense related number CPU cores installed system. , instance, value 3.14 system 10 logical CPUs means system load 31.4% percent last N minutes.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_loadavg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the average system load over the last 1, 5 and 15 minutes as a\ntuple. — ps_loadavg","text":"","code":"ps_loadavg()"},{"path":"https://ps.r-lib.org/dev/reference/ps_loadavg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the average system load over the last 1, 5 and 15 minutes as a\ntuple. — ps_loadavg","text":"Numeric vector length 3.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_loadavg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the average system load over the last 1, 5 and 15 minutes as a\ntuple. — ps_loadavg","text":"","code":"ps_loadavg() #> [1] 1.36 0.67 0.27"},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Memory usage information — ps_memory_info","title":"Memory usage information — ps_memory_info","text":"Memory usage information","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Memory usage information — ps_memory_info","text":"","code":"ps_memory_info(p = ps_handle())  ps_memory_full_info(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Memory usage information — ps_memory_info","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Memory usage information — ps_memory_info","text":"Named real vector.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Memory usage information — ps_memory_info","text":"ps_memory_info() returns information memory usage. returns named list. Portable fields: rss: \"Resident Set Size\", non-swapped physical memory process used (bytes). UNIX matches \"top\"‘s 'RES' column (see doc). Windows alias wset field matches \"Memory\" column taskmgr.exe. vmem: \"Virtual Memory Size\", total amount virtual memory used process (bytes). UNIX matches \"top\"‘s 'VIRT' column (see doc). Windows alias pagefile field matches \"Working set (memory)\" column taskmgr.exe. Non-portable fields: shared: (Linux) memory potentially shared processes (bytes). matches \"top\"‘s 'SHR' column (see doc). text: (Linux): aka 'TRS' (text resident set) amount memory devoted executable code (bytes). matches \"top\"‘s 'CODE' column (see doc). data: (Linux): aka 'DRS' (data resident set) amount physical memory devoted executable code (bytes). matches \"top\"‘s 'DATA' column (see doc). lib: (Linux): memory used shared libraries (bytes). dirty: (Linux): amount memory dirty pages (bytes). pfaults: (macOS): number page faults. pageins: (macOS): number actual pageins. explanation Windows fields see PROCESS_MEMORY_COUNTERS_EX structure. ps_memory_full_info() returns fields ps_memory_info(), plus additional information, typically takes slightly longer run, might access processes ps_memory_info() can query: uss: Unique Set Size, memory unique process freed process terminated right now. pss (Linux ): Proportional Set Size, amount memory shared processes, accounted way amount divided evenly processes share . .e. process 10 MBs 10 MBs shared another process PSS 15 MBs. swap (Linux ): amount memory swapped disk. throw zombie_process() error zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Memory usage information — ps_memory_info","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_memory_info(p) #>       rss       vms    shared      text       lib      data     dirty  #> 252284928 491069440  30703616      4096         0 328015872         0  ps_memory_full_info(p) #>       rss       vms    shared      text       lib      data     dirty  #> 252284928 491069440  30703616      4096         0 328015872         0  #>       uss       pss      swap  #> 233054208 235980800         0"},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Process name — ps_name","title":"Process name — ps_name","text":"name program, typically name executable.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process name — ps_name","text":"","code":"ps_name(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process name — ps_name","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process name — ps_name","text":"Character scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process name — ps_name","text":"Unix can change, e.g. via exec*() system call. ps_name() works zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process name — ps_name","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_name(p) #> [1] \"R\" ps_exe(p) #> [1] \"/opt/R/4.2.0/lib/R/bin/exec/R\" ps_cmdline(p) #> [1] \"/opt/R/4.2.0/lib/R/bin/exec/R\"                                       #> [2] \"--no-echo\"                                                           #> [3] \"--no-restore\"                                                        #> [4] \"--file=/home/runner/work/_temp/998477a2-1122-4b78-8054-537f1114bc8d\""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of open file descriptors — ps_num_fds","title":"Number of open file descriptors — ps_num_fds","text":"Note IDEs, e.g. RStudio R.app macOS, IDE opens files threads, addition files opened main R thread.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of open file descriptors — ps_num_fds","text":"","code":"ps_num_fds(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of open file descriptors — ps_num_fds","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of open file descriptors — ps_num_fds","text":"Integer scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of open file descriptors — ps_num_fds","text":"zombie process throws zombie_process error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of open file descriptors — ps_num_fds","text":"","code":"p <- ps_handle() ps_num_fds(p) #> [1] 20 f <- file(tmp <- tempfile(), \"w\") ps_num_fds(p) #> [1] 21 close(f) unlink(tmp) ps_num_fds(p) #> [1] 20"},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of threads — ps_num_threads","title":"Number of threads — ps_num_threads","text":"Throws zombie_process() error zombie processes.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of threads — ps_num_threads","text":"","code":"ps_num_threads(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of threads — ps_num_threads","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of threads — ps_num_threads","text":"Integer scalar.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of threads — ps_num_threads","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_num_threads(p) #> [1] 2"},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Open files of a process — ps_open_files","title":"Open files of a process — ps_open_files","text":"Note IDEs, e.g. RStudio R.app macOS, IDE opens files threads, addition files opened main R thread.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open files of a process — ps_open_files","text":"","code":"ps_open_files(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open files of a process — ps_open_files","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open files of a process — ps_open_files","text":"Data frame, tibble tibble package available, columns: fd path. fd numeric file descriptor POSIX systems, NA Windows. path absolute path file.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open files of a process — ps_open_files","text":"zombie process throws zombie_process error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open files of a process — ps_open_files","text":"","code":"p <- ps_handle() ps_open_files(p) #> # A tibble: 12 × 2 #>       fd path                                                         #>    <int> <chr>                                                        #>  1     0 pipe:[65550]                                                 #>  2     1 pipe:[65551]                                                 #>  3     2 pipe:[65552]                                                 #>  4     3 /home/runner/work/_temp/998477a2-1122-4b78-8054-537f1114bc8d #>  5     4 anon_inode:[eventpoll]                                       #>  6     5 pipe:[64926]                                                 #>  7     6 pipe:[64926]                                                 #>  8     7 pipe:[64927]                                                 #>  9     9 pipe:[64927]                                                 #> 10    10 anon_inode:[eventfd]                                         #> 11   112 pipe:[32441]                                                 #> 12   115 pipe:[32442]                                                 f <- file(tmp <- tempfile(), \"w\") ps_open_files(p) #> # A tibble: 13 × 2 #>       fd path                                                         #>    <int> <chr>                                                        #>  1     0 pipe:[65550]                                                 #>  2     1 pipe:[65551]                                                 #>  3     2 pipe:[65552]                                                 #>  4     3 /home/runner/work/_temp/998477a2-1122-4b78-8054-537f1114bc8d #>  5     4 anon_inode:[eventpoll]                                       #>  6     5 pipe:[64926]                                                 #>  7     6 pipe:[64926]                                                 #>  8     7 pipe:[64927]                                                 #>  9     9 pipe:[64927]                                                 #> 10    10 anon_inode:[eventfd]                                         #> 11    17 /tmp/RtmpY2Wvf5/file2c5f7c56aaab                             #> 12   112 pipe:[32441]                                                 #> 13   115 pipe:[32442]                                                 close(f) unlink(tmp) ps_open_files(p) #> # A tibble: 12 × 2 #>       fd path                                                         #>    <int> <chr>                                                        #>  1     0 pipe:[65550]                                                 #>  2     1 pipe:[65551]                                                 #>  3     2 pipe:[65552]                                                 #>  4     3 /home/runner/work/_temp/998477a2-1122-4b78-8054-537f1114bc8d #>  5     4 anon_inode:[eventpoll]                                       #>  6     5 pipe:[64926]                                                 #>  7     6 pipe:[64926]                                                 #>  8     7 pipe:[64927]                                                 #>  9     9 pipe:[64927]                                                 #> 10    10 anon_inode:[eventfd]                                         #> 11   112 pipe:[32441]                                                 #> 12   115 pipe:[32442]"},{"path":"https://ps.r-lib.org/dev/reference/ps_os_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the type of the OS — ps_os_type","title":"Query the type of the OS — ps_os_type","text":"Query type OS","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_os_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the type of the OS — ps_os_type","text":"","code":"ps_os_type()  ps_is_supported()"},{"path":"https://ps.r-lib.org/dev/reference/ps_os_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the type of the OS — ps_os_type","text":"ps_os_type returns named logical vector. rest functions return logical scalar. ps_is_supported() returns TRUE ps supports current platform.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_os_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the type of the OS — ps_os_type","text":"","code":"ps_os_type() #>   POSIX WINDOWS   LINUX   MACOS  #>    TRUE   FALSE    TRUE   FALSE  ps_is_supported() #> [1] TRUE"},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":null,"dir":"Reference","previous_headings":"","what":"Pid of a process handle — ps_pid","title":"Pid of a process handle — ps_pid","text":"function works even process already finished.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pid of a process handle — ps_pid","text":"","code":"ps_pid(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pid of a process handle — ps_pid","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pid of a process handle — ps_pid","text":"Process id.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pid of a process handle — ps_pid","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_pid(p) #> [1] 11359 ps_pid(p) == Sys.getpid() #> [1] TRUE"},{"path":"https://ps.r-lib.org/dev/reference/ps_pids.html","id":null,"dir":"Reference","previous_headings":"","what":"Ids of all processes on the system — ps_pids","title":"Ids of all processes on the system — ps_pids","text":"Ids processes system","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_pids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ids of all processes on the system — ps_pids","text":"","code":"ps_pids()"},{"path":"https://ps.r-lib.org/dev/reference/ps_pids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ids of all processes on the system — ps_pids","text":"Integer vector process ids.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":null,"dir":"Reference","previous_headings":"","what":"Parent pid or parent process of a process — ps_ppid","title":"Parent pid or parent process of a process — ps_ppid","text":"ps_ppid() returns parent pid, ps_parent() returns ps_handle parent.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parent pid or parent process of a process — ps_ppid","text":"","code":"ps_ppid(p = ps_handle())  ps_parent(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parent pid or parent process of a process — ps_ppid","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parent pid or parent process of a process — ps_ppid","text":"ps_ppid() returns integer scalar, pid parent p. ps_parent() returns ps_handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parent pid or parent process of a process — ps_ppid","text":"POSIX systems, parent process terminates, another process (typically pid 1 process) marked parent. ps_ppid() ps_parent() return process . ps_ppid() ps_parent() work zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parent pid or parent process of a process — ps_ppid","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_ppid(p) #> [1] 1467 ps_parent(p) #> <ps::ps_handle> PID=1467, NAME=Runner.Worker, AT=2022-04-27 06:21:59"},{"path":"https://ps.r-lib.org/dev/reference/ps_resume.html","id":null,"dir":"Reference","previous_headings":"","what":"Resume (continue) a stopped process — ps_resume","title":"Resume (continue) a stopped process — ps_resume","text":"Resume process execution SIGCONT preemptively checking whether PID reused. Windows effect resuming process threads.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_resume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resume (continue) a stopped process — ps_resume","text":"","code":"ps_resume(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_resume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resume (continue) a stopped process — ps_resume","text":"p Process handle.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_resume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resume (continue) a stopped process — ps_resume","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=12768, NAME=sleep, AT=2022-04-27 06:24:37 ps_suspend(p) #> NULL ps_status(p) #> [1] \"stopped\" ps_resume(p) #> NULL ps_status(p) #> [1] \"sleeping\" ps_kill(p) #> NULL"},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Send signal to a process — ps_send_signal","title":"Send signal to a process — ps_send_signal","text":"Send signal process. implemented Windows. See signals() list signals current platform.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send signal to a process — ps_send_signal","text":"","code":"ps_send_signal(p = ps_handle(), sig)"},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send signal to a process — ps_send_signal","text":"p Process handle. sig Signal number, see signals().","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Send signal to a process — ps_send_signal","text":"checks process still running, sending signal, avoid signalling wrong process, pid reuse.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send signal to a process — ps_send_signal","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=12799, NAME=sleep, AT=2022-04-27 06:24:37 ps_send_signal(p, signals()$SIGINT) #> NULL p #> <ps::ps_handle> PID=12799, NAME=???, AT=2022-04-27 06:24:37 ps_is_running(p) #> [1] FALSE px$get_exit_status() #> [1] -2"},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":null,"dir":"Reference","previous_headings":"","what":"List all processes that loaded a shared library — ps_shared_lib_users","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"List processes loaded shared library","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"","code":"ps_shared_lib_users(paths, user = ps_username(), filter = NULL)"},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"paths Character vector paths shared libraries look . must absolute paths. need exist. Forward slashes converted backward slashes Windows, output always backward slashes paths. user Character scalar NULL. NULL, processes user considered. defaults current user. filter Character vector NULL. NULL, vector glob expressions, used filter process names.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"data frame (tibble) columns: dll: file name dll file, without path, path: path shared library, pid: process ID process, name: name process, username: username process owner, ps_handle: ps_handle object, can used query manipulate process.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"notes-","dir":"Reference","previous_headings":"","what":"Notes:","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"function currently works Windows. Windows, 32 bit R process can list 32 bit processes. Similarly, 64 bit R process can list 64 bit processes. limitation Windows API. Even though Windows file systems (almost always) case insensitive, matching paths, user also filter case sensitive. might change future. function can slow Windows, needs enumerate shared libraries processes system, unless filter argument set. Make sure set filter can. want look multiple shared libraries, list paths, instead calling ps_shared_lib_users individually. libraries loaded R processes, might want set filter c(\"Rgui.exe\", \"Rterm.exe\", \"rsession.exe\") last one RStudio.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"","code":"if (FALSE) { # ps::ps_is_supported() && !ps:::is_cran_check() && ps::ps_os_type()[[\"WINDOWS\"]] dlls <- vapply(getLoadedDLLs(), \"[[\", character(1), \"path\") psdll <- dlls[[\"ps\"]][[1]] r_procs <- c(\"Rgui.exe\", \"Rterm.exe\", \"rsession.exe\") ps_shared_lib_users(psdll, filter = r_procs) }"},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":null,"dir":"Reference","previous_headings":"","what":"List the dynamically loaded libraries of a process — ps_shared_libs","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"Note: function currently works Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"","code":"ps_shared_libs(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"Data frame one column currently: path, absolute path loaded module shared library. Windows list includes executable file .","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"","code":"if (FALSE) { # ps::ps_is_supported() && !ps:::is_cran_check() && ps::ps_os_type()[[\"WINDOWS\"]] # The loaded DLLs of the current process ps_shared_libs() }"},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Current process status — ps_status","title":"Current process status — ps_status","text":"One following: \"idle\": Process created fork, macOS . \"running\": Currently runnable macOS Windows. Actually running Linux. \"sleeping\" Sleeping wait poll. \"disk_sleep\" Uninterruptible sleep, waiting /O operation (Linux ). \"stopped\" Stopped, either job control signal traced. \"tracing_stop\" Stopped tracing (Linux ). \"zombie\" Zombie. Finished, parent read exit status yet. \"dead\" never seen (Linux). \"wake_kill\" Received fatal signal (Linux ). \"waking\" Paging (Linux , valid since 2.6.xx kernel).","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current process status — ps_status","text":"","code":"ps_status(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current process status — ps_status","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current process status — ps_status","text":"Character scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current process status — ps_status","text":"Works zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current process status — ps_status","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_status(p) #> [1] \"running\""},{"path":"https://ps.r-lib.org/dev/reference/ps_suspend.html","id":null,"dir":"Reference","previous_headings":"","what":"Suspend (stop) the process — ps_suspend","title":"Suspend (stop) the process — ps_suspend","text":"Suspend process execution SIGSTOP preemptively checking whether PID reused. Windows effect suspending process threads.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_suspend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suspend (stop) the process — ps_suspend","text":"","code":"ps_suspend(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_suspend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suspend (stop) the process — ps_suspend","text":"p Process handle.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_suspend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suspend (stop) the process — ps_suspend","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=12920, NAME=sleep, AT=2022-04-27 06:24:38 ps_suspend(p) #> NULL ps_status(p) #> [1] \"stopped\" ps_resume(p) #> NULL ps_status(p) #> [1] \"sleeping\" ps_kill(p) #> NULL"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":null,"dir":"Reference","previous_headings":"","what":"System CPU times. — ps_system_cpu_times","title":"System CPU times. — ps_system_cpu_times","text":"Every attribute represents seconds CPU spent given mode. attributes availability varies depending platform: user: time spent normal processes executing user mode; Linux also includes guest time. system: time spent processes executing kernel mode. idle: time spent nothing.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System CPU times. — ps_system_cpu_times","text":"","code":"ps_system_cpu_times()"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System CPU times. — ps_system_cpu_times","text":"Named list","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"System CPU times. — ps_system_cpu_times","text":"Platform-specific fields: nice (UNIX): time spent niced (prioritized) processes executing user mode; Linux also includes guest_nice time. iowait (Linux): time spent waiting /O complete. accounted idle time counter. irq (Linux): time spent servicing hardware interrupts. softirq (Linux): time spent servicing software interrupts. steal (Linux 2.6.11+): time spent operating systems running virtualized environment. guest (Linux 2.6.24+): time spent running virtual CPU guest operating systems control Linux kernel. guest_nice (Linux 3.2.0+): time spent running niced guest (virtual CPU guest operating systems control Linux kernel).","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"System CPU times. — ps_system_cpu_times","text":"","code":"ps_system_cpu_times() #>       user       nice     system       idle     iowait        irq  #>      14673       1265       4552      15944        385          0  #>    softirq      steal      guest guest_nice  #>        193          0          0          0"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_memory.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistics about system memory usage — ps_system_memory","title":"Statistics about system memory usage — ps_system_memory","text":"Statistics system memory usage","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_memory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistics about system memory usage — ps_system_memory","text":"","code":"ps_system_memory()"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_memory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistics about system memory usage — ps_system_memory","text":"Named list. numbers bytes: total: total physical memory (exclusive swap). avail memory can given instantly processes without system going swap. calculated summing different memory values depending platform supposed used monitor actual memory usage cross platform fashion. percent: Percentage memory taken. used: memory used, calculated differently depending platform designed informational purposes . total - free necessarily match used. free: memory used (zeroed) readily available; note doesn’t reflect actual memory available (use available instead). total - used necessarily match free. active: (Unix ) memory currently use recently used, RAM. inactive: (Unix ) memory marked used. wired: (macOS ) memory marked always stay RAM. never moved disk. buffers: (Linux ) cache things like file system metadata. cached: (Linux ) cache various things. shared: (Linux ) memory may simultaneously accessed multiple processes. slab:  (Linux ) -kernel data structures cache.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_system_memory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistics about system memory usage — ps_system_memory","text":"","code":"ps_system_memory() #> $total #> [1] 7283847168 #>  #> $avail #> [1] 6192381952 #>  #> $percent #> [1] 14.98474 #>  #> $used #> [1] 761540608 #>  #> $free #> [1] 3885801472 #>  #> $active #> [1] 945307648 #>  #> $inactive #> [1] 1908797440 #>  #> $buffers #> [1] 252518400 #>  #> $cached #> [1] 2383986688 #>  #> $shared #> [1] 9814016 #>  #> $slab #> [1] 447782912 #>"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_swap.html","id":null,"dir":"Reference","previous_headings":"","what":"System swap memory statistics — ps_system_swap","title":"System swap memory statistics — ps_system_swap","text":"System swap memory statistics","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_swap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System swap memory statistics — ps_system_swap","text":"","code":"ps_system_swap()"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_swap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System swap memory statistics — ps_system_swap","text":"Named list. numbers bytes: total: total swap memory. used: used swap memory. free: free swap memory. percent: percentage usage. sin: number bytes system swapped disk (cumulative). NA Windows. sout: number bytes system swapped disk (cumulative). NA Windows.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_system_swap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"System swap memory statistics — ps_system_swap","text":"","code":"ps_system_swap() #> $total #> [1] 4294963200 #>  #> $used #> [1] 0 #>  #> $free #> [1] 4294963200 #>  #> $percent #> [1] 0 #>  #> $sin #> [1] 0 #>  #> $sout #> [1] 0 #>"},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminal device of the process — ps_terminal","title":"Terminal device of the process — ps_terminal","text":"Returns terminal process. implemented Windows, always returns NA_character_. Unix returns NA_character_ process terminal.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminal device of the process — ps_terminal","text":"","code":"ps_terminal(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminal device of the process — ps_terminal","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Terminal device of the process — ps_terminal","text":"Character scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminal device of the process — ps_terminal","text":"Works zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminal device of the process — ps_terminal","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_terminal(p) #> [1] NA"},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminate a Unix process — ps_terminate","title":"Terminate a Unix process — ps_terminate","text":"Send SIGTERM signal process. implemented Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminate a Unix process — ps_terminate","text":"","code":"ps_terminate(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminate a Unix process — ps_terminate","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminate a Unix process — ps_terminate","text":"Checks process still running, work around pid reuse.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminate a Unix process — ps_terminate","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=13072, NAME=sleep, AT=2022-04-27 06:24:39 ps_terminate(p) #> NULL p #> <ps::ps_handle> PID=13072, NAME=???, AT=2022-04-27 06:24:39 ps_is_running(p) #> [1] FALSE px$get_exit_status() #> [1] -15"},{"path":"https://ps.r-lib.org/dev/reference/ps_tty_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the size of the current terminal — ps_tty_size","title":"Query the size of the current terminal — ps_tty_size","text":"standard output current R process terminal, e.g. redirected file, R process running GUI, throw error. need handle error want use function package.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_tty_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the size of the current terminal — ps_tty_size","text":"","code":"ps_tty_size()"},{"path":"https://ps.r-lib.org/dev/reference/ps_tty_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the size of the current terminal — ps_tty_size","text":"error happens, error message different depending type device standard output . common error messages : \"Inappropriate ioctl device.\" \"Operation supported socket.\" \"Operation supported device.\" Whatever error message, ps_tty_size always fails error class ps_unknown_tty_size, can catch.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_tty_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the size of the current terminal — ps_tty_size","text":"","code":"# An example that falls back to the 'width' option tryCatch(   ps_tty_size(),   ps_unknown_tty_size = function(err) {     c(width = getOption(\"width\"), height = NA_integer_)   } ) #>  width height  #>     74     NA"},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"User ids and group ids of the process — ps_uids","title":"User ids and group ids of the process — ps_uids","text":"User ids group ids process. return integer vectors names: real, effective saved.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User ids and group ids of the process — ps_uids","text":"","code":"ps_uids(p = ps_handle())  ps_gids(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User ids and group ids of the process — ps_uids","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User ids and group ids of the process — ps_uids","text":"Named integer vector length 3, names: real, effective saved.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"User ids and group ids of the process — ps_uids","text":"work zombie processes. implemented Windows, throw not_implemented error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"User ids and group ids of the process — ps_uids","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_uids(p) #>      real effective     saved  #>      1001      1001      1001  ps_gids(p) #>      real effective     saved  #>       121       121       121"},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":null,"dir":"Reference","previous_headings":"","what":"Owner of the process — ps_username","title":"Owner of the process — ps_username","text":"name user owns process. Unix calculated real user id.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Owner of the process — ps_username","text":"","code":"ps_username(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Owner of the process — ps_username","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Owner of the process — ps_username","text":"String scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Owner of the process — ps_username","text":"Unix, numeric uid id returned uid user database, thus username determined. Works zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Owner of the process — ps_username","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=11359, NAME=R, AT=2022-04-27 06:24:21 ps_username(p) #> [1] \"runner\""},{"path":"https://ps.r-lib.org/dev/reference/ps_users.html","id":null,"dir":"Reference","previous_headings":"","what":"List users connected to the system — ps_users","title":"List users connected to the system — ps_users","text":"List users connected system","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List users connected to the system — ps_users","text":"","code":"ps_users()"},{"path":"https://ps.r-lib.org/dev/reference/ps_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List users connected to the system — ps_users","text":"data frame (tibble) columns username, tty, hostname, start_time, pid. tty pidare NA Windows. pid process id login process. local users hostname column empty string.","code":""},{"path":"https://ps.r-lib.org/dev/reference/signals.html","id":null,"dir":"Reference","previous_headings":"","what":"List of all supported signals — signals","title":"List of all supported signals — signals","text":"signals supported current platform included.","code":""},{"path":"https://ps.r-lib.org/dev/reference/signals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of all supported signals — signals","text":"","code":"signals()"},{"path":"https://ps.r-lib.org/dev/reference/signals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of all supported signals — signals","text":"List integers, named signal names.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-170","dir":"Changelog","previous_headings":"","what":"ps 1.7.0","title":"ps 1.7.0","text":"CRAN release: 2022-04-23 ps now compiles platforms enable OpenMP (#109). New functions ps_get_cpu_affinity() ps_set_cpu_affinity() query set CPU affinity (#123). ps_memory_info() now mix rss vms Linux. ps_memory_info() now reports memory bytes instead pages Linux (#115)","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-160","dir":"Changelog","previous_headings":"","what":"ps 1.6.0","title":"ps 1.6.0","text":"CRAN release: 2021-02-28 New function ps_system_cpu_times() calculate system CPU times. New function ps_loadavg() show Unix style load average.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-150","dir":"Changelog","previous_headings":"","what":"ps 1.5.0","title":"ps 1.5.0","text":"CRAN release: 2020-12-05 New function ps_shared_libs() list loaded shared libraries process, Windows. New function ps_shared_lib_users() list processes loaded certain shared library, Windows. New function ps_descent() query ancestry process.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-140","dir":"Changelog","previous_headings":"","what":"ps 1.4.0","title":"ps 1.4.0","text":"CRAN release: 2020-10-07 ps now MIT license. Process functions now default calling R process. e.g. can write simply ps_connections() list network connections current process, instead ps_connections(ps_handle()). New ps_get_nice() ps_set_nice() functions get set priority process (#89). New ps_system_memory() ps_system_swap() functions, return information system memory swap usage. New ps_disk_partitions() ps_disk_usage() functions, return information file systems, similarly mount df Unix commands. New ps_tty_size() function query size terminal. Fixed issue CLeanupReporter() triggered random failures macOS.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-134","dir":"Changelog","previous_headings":"","what":"ps 1.3.4","title":"ps 1.3.4","text":"CRAN release: 2020-08-11 ps_cpu_count() now reports correct number Windows, even package binary built Windows version different API (#77).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-133","dir":"Changelog","previous_headings":"","what":"ps 1.3.3","title":"ps 1.3.3","text":"CRAN release: 2020-05-08 New function errno() returns table errno.h error codes description. ps now compiles Solaris.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-132","dir":"Changelog","previous_headings":"","what":"ps 1.3.2","title":"ps 1.3.2","text":"CRAN release: 2020-02-13 ps now compiles unsupported platforms like Solaris.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-131","dir":"Changelog","previous_headings":"","what":"ps 1.3.1","title":"ps 1.3.1","text":"CRAN release: 2020-02-12 Fixed installation problem Windows versions, output cmd /c ver looks different (#69).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-130","dir":"Changelog","previous_headings":"","what":"ps 1.3.0","title":"ps 1.3.0","text":"CRAN release: 2018-12-21 New ps_cpu_count() function returns number logical physical processors.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-121","dir":"Changelog","previous_headings":"","what":"ps 1.2.1","title":"ps 1.2.1","text":"CRAN release: 2018-11-06 Fix crash Linux, happened load time (#50).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-120","dir":"Changelog","previous_headings":"","what":"ps 1.2.0","title":"ps 1.2.0","text":"CRAN release: 2018-10-16 New ps_connections() list network connections. CleanupReporter() testthat reporter can check leftover open network connections test cases. ps_open_files() include open sockets now Linux, rather included ps_connections(). CleanupReporter() now ignores /dev/urandom, packages (curl, openssl, etc.) keep file open. Fix ps() printing without tibble package (#43). Fix compilation ICC (#39). Fix crash Linux (#47).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-110","dir":"Changelog","previous_headings":"","what":"ps 1.1.0","title":"ps 1.1.0","text":"CRAN release: 2018-08-10 New ps_num_fds() returns number open files/handles. New ps_open_files() lists open files process. New ps_interrupt() interrupts process. sends SIGINT signal POSIX systems, can send CTRL+C CTRL+BREAK events Windows. New ps_users() lists users connected system. New ps_mark_tree(), ps_find_tree(), ps_kill_tree(), with_process_cleanup(): functions mark clean child processes. New CleanupReporter, used testthat: checks leftover child processes open files test_that() blocks.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-100","dir":"Changelog","previous_headings":"","what":"ps 1.0.0","title":"ps 1.0.0","text":"CRAN release: 2018-07-22 First released version.","code":""}]
